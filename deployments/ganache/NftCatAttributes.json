{
  "address": "0xDD7695bb4b552be60AA1A86Ba088FDbce4381fc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum NftCatAttributes.Breed",
          "name": "breed",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum NftCatAttributes.Color",
          "name": "eyecolor",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playfulness",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cuteness",
          "type": "uint256"
        }
      ],
      "name": "NftCatAttributesCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "NftCatAttributesRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "requestCatAttributes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7636842d60d7b8653304619dfb39b21f2d6be647a8c33f17a0e482453141db64",
  "receipt": {
    "to": null,
    "from": "0xB1523ADf5afA0b50E40843D648eAF26F4fb4fdEA",
    "contractAddress": "0xDD7695bb4b552be60AA1A86Ba088FDbce4381fc6",
    "transactionIndex": 0,
    "gasUsed": "899211",
    "logsBloom": "0x
    "blockHash": "0xd5133bf006f65ce482f85e0f633f9a52f416972fec47031ad934ef63fe132c13",
    "transactionHash": "0x7636842d60d7b8653304619dfb39b21f2d6be647a8c33f17a0e482453141db64",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x7636842d60d7b8653304619dfb39b21f2d6be647a8c33f17a0e482453141db64",
        "address": "0xDD7695bb4b552be60AA1A86Ba088FDbce4381fc6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1523adf5afa0b50e40843d648eaf26f4fb4fdea"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd5133bf006f65ce482f85e0f633f9a52f416972fec47031ad934ef63fe132c13"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "899211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA79deD1d4592325Ed39474d8434484558B2313aF",
    "1",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "18a123c640fa7b67f59a0fd3bb8e137f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum NftCatAttributes.Breed\",\"name\":\"breed\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum NftCatAttributes.Color\",\"name\":\"eyecolor\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playfulness\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cuteness\",\"type\":\"uint256\"}],\"name\":\"NftCatAttributesCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NftCatAttributesRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"requestCatAttributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftCatAttributes.sol\":\"NftCatAttributes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/NftCatAttributes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NftCatAttributes is VRFConsumerBaseV2, Ownable {\\n    enum Breed {\\n        Ragdoll,\\n        Sphynx,\\n        Persian,\\n        numberOfBreeds\\n    }\\n    enum Color {\\n        blue,\\n        yellow,\\n        grey,\\n        red,\\n        numberOfColors\\n    }\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 4;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    mapping(uint256 => address) public s_requestIdToSender;\\n\\n    event NftCatAttributesRequested(uint256 requestId, address requester);\\n    event NftCatAttributesCreated(\\n        uint256 requestId,\\n        address requester,\\n        Breed breed,\\n        Color eyecolor,\\n        uint256 playfulness,\\n        uint256 cuteness\\n    );\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function requestCatAttributes(address owner) external onlyOwner returns (uint256 requestId) {\\n        requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToSender[requestId] = owner;\\n        emit NftCatAttributesRequested(requestId, owner);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        address owner = s_requestIdToSender[requestId];\\n        uint256 breedIndex = randomWords[0] % uint256(Breed.numberOfBreeds);\\n        uint256 eyeColorIndex = randomWords[1] % uint256(Color.numberOfColors);\\n        uint256 playfulness = randomWords[2] % 100;\\n        uint256 cuteness = randomWords[3] % 100;\\n\\n        emit NftCatAttributesCreated(\\n            requestId,\\n            owner,\\n            Breed(breedIndex),\\n            Color(eyeColorIndex),\\n            playfulness,\\n            cuteness\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6b0d2ce6abe9d1a85a151019a70af64fa05adb6bcbad651e02ef163998e31190\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001266380380620012668339818101604052810190620000389190620002fc565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200008e620000826200010560201b60201c565b6200010d60201b60201c565b8373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508267ffffffffffffffff1660c08167ffffffffffffffff16815250508160e081815250508063ffffffff166101008163ffffffff1681525050505050506200036e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020382620001d6565b9050919050565b6200021581620001f6565b81146200022157600080fd5b50565b60008151905062000235816200020a565b92915050565b600067ffffffffffffffff82169050919050565b6200025a816200023b565b81146200026657600080fd5b50565b6000815190506200027a816200024f565b92915050565b6000819050919050565b620002958162000280565b8114620002a157600080fd5b50565b600081519050620002b5816200028a565b92915050565b600063ffffffff82169050919050565b620002d681620002bb565b8114620002e257600080fd5b50565b600081519050620002f681620002cb565b92915050565b60008060008060808587031215620003195762000318620001d1565b5b6000620003298782880162000224565b94505060206200033c8782880162000269565b93505060406200034f87828801620002a4565b92505060606200036287828801620002e5565b91505092959194509250565b60805160a05160c05160e05161010051610eac620003ba6000396000610287015260006102430152600061026401526000610207015260008181610129015261017d0152610eac6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631fe543e314610067578063715018a6146100835780638bc59d331461008d5780638da5cb5b146100bd578063a36f573b146100db578063f2fde38b1461010b575b600080fd5b610081600480360381019061007c91906108f1565b610127565b005b61008b6101e7565b005b6100a760048036038101906100a291906109ab565b6101fb565b6040516100b491906109e7565b60405180910390f35b6100c56103ac565b6040516100d29190610a11565b60405180910390f35b6100f560048036038101906100f09190610a2c565b6103d5565b6040516101029190610a11565b60405180910390f35b610125600480360381019061012091906109ab565b610408565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101d0929190610a59565b60405180910390fd5b6101e3828261048c565b5050565b6101ef610604565b6101f96000610682565b565b6000610205610604565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060046040518663ffffffff1660e01b81526004016102c8959493929190610afa565b602060405180830381600087803b1580156102e257600080fd5b505af11580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610b62565b9050816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ee28e843b6952c7768d547b9003e6c12e66a3d4d2abc56c37ab391fabfda450818360405161039f929190610b8f565b60405180910390a1919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610410610604565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790610c3b565b60405180910390fd5b61048981610682565b50565b60006001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006003808111156104d9576104d8610c5b565b5b836000815181106104ed576104ec610c8a565b5b60200260200101516104ff9190610ce8565b9050600060048081111561051657610515610c5b565b5b8460018151811061052a57610529610c8a565b5b602002602001015161053c9190610ce8565b9050600060648560028151811061055657610555610c8a565b5b60200260200101516105689190610ce8565b9050600060648660038151811061058257610581610c8a565b5b60200260200101516105949190610ce8565b90507fc3647f8aff0bfe1889326d41a49e34ab63069c6760ce06c6d25df740eacc9a2287868660038111156105cc576105cb610c5b565b5b8660048111156105df576105de610c5b565b5b86866040516105f396959493929190610da9565b60405180910390a150505050505050565b61060c610746565b73ffffffffffffffffffffffffffffffffffffffff1661062a6103ac565b73ffffffffffffffffffffffffffffffffffffffff1614610680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067790610e56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61077581610762565b811461078057600080fd5b50565b6000813590506107928161076c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107e68261079d565b810181811067ffffffffffffffff82111715610805576108046107ae565b5b80604052505050565b600061081861074e565b905061082482826107dd565b919050565b600067ffffffffffffffff821115610844576108436107ae565b5b602082029050602081019050919050565b600080fd5b600061086d61086884610829565b61080e565b905080838252602082019050602084028301858111156108905761088f610855565b5b835b818110156108b957806108a58882610783565b845260208401935050602081019050610892565b5050509392505050565b600082601f8301126108d8576108d7610798565b5b81356108e884826020860161085a565b91505092915050565b6000806040838503121561090857610907610758565b5b600061091685828601610783565b925050602083013567ffffffffffffffff8111156109375761093661075d565b5b610943858286016108c3565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109788261094d565b9050919050565b6109888161096d565b811461099357600080fd5b50565b6000813590506109a58161097f565b92915050565b6000602082840312156109c1576109c0610758565b5b60006109cf84828501610996565b91505092915050565b6109e181610762565b82525050565b60006020820190506109fc60008301846109d8565b92915050565b610a0b8161096d565b82525050565b6000602082019050610a266000830184610a02565b92915050565b600060208284031215610a4257610a41610758565b5b6000610a5084828501610783565b91505092915050565b6000604082019050610a6e6000830185610a02565b610a7b6020830184610a02565b9392505050565b6000819050919050565b610a9581610a82565b82525050565b600067ffffffffffffffff82169050919050565b610ab881610a9b565b82525050565b600061ffff82169050919050565b610ad581610abe565b82525050565b600063ffffffff82169050919050565b610af481610adb565b82525050565b600060a082019050610b0f6000830188610a8c565b610b1c6020830187610aaf565b610b296040830186610acc565b610b366060830185610aeb565b610b436080830184610aeb565b9695505050505050565b600081519050610b5c8161076c565b92915050565b600060208284031215610b7857610b77610758565b5b6000610b8684828501610b4d565b91505092915050565b6000604082019050610ba460008301856109d8565b610bb16020830184610a02565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c25602683610bb8565b9150610c3082610bc9565b604082019050919050565b60006020820190508181036000830152610c5481610c18565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cf382610762565b9150610cfe83610762565b925082610d0e57610d0d610cb9565b5b828206905092915050565b60048110610d2a57610d29610c5b565b5b50565b6000819050610d3b82610d19565b919050565b6000610d4b82610d2d565b9050919050565b610d5b81610d40565b82525050565b60058110610d7257610d71610c5b565b5b50565b6000819050610d8382610d61565b919050565b6000610d9382610d75565b9050919050565b610da381610d88565b82525050565b600060c082019050610dbe60008301896109d8565b610dcb6020830188610a02565b610dd86040830187610d52565b610de56060830186610d9a565b610df260808301856109d8565b610dff60a08301846109d8565b979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e40602083610bb8565b9150610e4b82610e0a565b602082019050919050565b60006020820190508181036000830152610e6f81610e33565b905091905056fea2646970667358221220220589c4ffdc65698cb47c6551286039381a5f77dd1d58974103a99d95c930ea64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631fe543e314610067578063715018a6146100835780638bc59d331461008d5780638da5cb5b146100bd578063a36f573b146100db578063f2fde38b1461010b575b600080fd5b610081600480360381019061007c91906108f1565b610127565b005b61008b6101e7565b005b6100a760048036038101906100a291906109ab565b6101fb565b6040516100b491906109e7565b60405180910390f35b6100c56103ac565b6040516100d29190610a11565b60405180910390f35b6100f560048036038101906100f09190610a2c565b6103d5565b6040516101029190610a11565b60405180910390f35b610125600480360381019061012091906109ab565b610408565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101d0929190610a59565b60405180910390fd5b6101e3828261048c565b5050565b6101ef610604565b6101f96000610682565b565b6000610205610604565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060046040518663ffffffff1660e01b81526004016102c8959493929190610afa565b602060405180830381600087803b1580156102e257600080fd5b505af11580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610b62565b9050816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ee28e843b6952c7768d547b9003e6c12e66a3d4d2abc56c37ab391fabfda450818360405161039f929190610b8f565b60405180910390a1919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610410610604565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790610c3b565b60405180910390fd5b61048981610682565b50565b60006001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006003808111156104d9576104d8610c5b565b5b836000815181106104ed576104ec610c8a565b5b60200260200101516104ff9190610ce8565b9050600060048081111561051657610515610c5b565b5b8460018151811061052a57610529610c8a565b5b602002602001015161053c9190610ce8565b9050600060648560028151811061055657610555610c8a565b5b60200260200101516105689190610ce8565b9050600060648660038151811061058257610581610c8a565b5b60200260200101516105949190610ce8565b90507fc3647f8aff0bfe1889326d41a49e34ab63069c6760ce06c6d25df740eacc9a2287868660038111156105cc576105cb610c5b565b5b8660048111156105df576105de610c5b565b5b86866040516105f396959493929190610da9565b60405180910390a150505050505050565b61060c610746565b73ffffffffffffffffffffffffffffffffffffffff1661062a6103ac565b73ffffffffffffffffffffffffffffffffffffffff1614610680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067790610e56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61077581610762565b811461078057600080fd5b50565b6000813590506107928161076c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107e68261079d565b810181811067ffffffffffffffff82111715610805576108046107ae565b5b80604052505050565b600061081861074e565b905061082482826107dd565b919050565b600067ffffffffffffffff821115610844576108436107ae565b5b602082029050602081019050919050565b600080fd5b600061086d61086884610829565b61080e565b905080838252602082019050602084028301858111156108905761088f610855565b5b835b818110156108b957806108a58882610783565b845260208401935050602081019050610892565b5050509392505050565b600082601f8301126108d8576108d7610798565b5b81356108e884826020860161085a565b91505092915050565b6000806040838503121561090857610907610758565b5b600061091685828601610783565b925050602083013567ffffffffffffffff8111156109375761093661075d565b5b610943858286016108c3565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109788261094d565b9050919050565b6109888161096d565b811461099357600080fd5b50565b6000813590506109a58161097f565b92915050565b6000602082840312156109c1576109c0610758565b5b60006109cf84828501610996565b91505092915050565b6109e181610762565b82525050565b60006020820190506109fc60008301846109d8565b92915050565b610a0b8161096d565b82525050565b6000602082019050610a266000830184610a02565b92915050565b600060208284031215610a4257610a41610758565b5b6000610a5084828501610783565b91505092915050565b6000604082019050610a6e6000830185610a02565b610a7b6020830184610a02565b9392505050565b6000819050919050565b610a9581610a82565b82525050565b600067ffffffffffffffff82169050919050565b610ab881610a9b565b82525050565b600061ffff82169050919050565b610ad581610abe565b82525050565b600063ffffffff82169050919050565b610af481610adb565b82525050565b600060a082019050610b0f6000830188610a8c565b610b1c6020830187610aaf565b610b296040830186610acc565b610b366060830185610aeb565b610b436080830184610aeb565b9695505050505050565b600081519050610b5c8161076c565b92915050565b600060208284031215610b7857610b77610758565b5b6000610b8684828501610b4d565b91505092915050565b6000604082019050610ba460008301856109d8565b610bb16020830184610a02565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c25602683610bb8565b9150610c3082610bc9565b604082019050919050565b60006020820190508181036000830152610c5481610c18565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cf382610762565b9150610cfe83610762565b925082610d0e57610d0d610cb9565b5b828206905092915050565b60048110610d2a57610d29610c5b565b5b50565b6000819050610d3b82610d19565b919050565b6000610d4b82610d2d565b9050919050565b610d5b81610d40565b82525050565b60058110610d7257610d71610c5b565b5b50565b6000819050610d8382610d61565b919050565b6000610d9382610d75565b9050919050565b610da381610d88565b82525050565b600060c082019050610dbe60008301896109d8565b610dcb6020830188610a02565b610dd86040830187610d52565b610de56060830186610d9a565b610df260808301856109d8565b610dff60a08301846109d8565b979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e40602083610bb8565b9150610e4b82610e0a565b602082019050919050565b60006020820190508181036000830152610e6f81610e33565b905091905056fea2646970667358221220220589c4ffdc65698cb47c6551286039381a5f77dd1d58974103a99d95c930ea64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/NftCatAttributes.sol:NftCatAttributes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3143,
        "contract": "contracts/NftCatAttributes.sol:NftCatAttributes",
        "label": "s_requestIdToSender",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}